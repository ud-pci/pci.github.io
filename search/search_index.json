{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to pCI's documentation pCI is a high-precision relativistic atomic calculation package based on the configuration interaction (CI) method and methods combining CI with many-body perturbation theory and/or the all-order coupled-cluster method. The serial version of the CI+MBPT code package was modified for public use and published in Computer Physics Communications in 2015 by M. Kozlov et al.","title":"Home"},{"location":"#welcome-to-pcis-documentation","text":"pCI is a high-precision relativistic atomic calculation package based on the configuration interaction (CI) method and methods combining CI with many-body perturbation theory and/or the all-order coupled-cluster method. The serial version of the CI+MBPT code package was modified for public use and published in Computer Physics Communications in 2015 by M. Kozlov et al.","title":"Welcome to pCI's documentation"},{"location":"about/","text":"About Us pCI Development Team Marianna Safronova Charles Cheung Sergey Porsev Mikhail Kozlov Ilya Tupitsyn Andrey Bondarev","title":"About"},{"location":"about/#about-us","text":"","title":"About Us"},{"location":"about/#pci-development-team","text":"Marianna Safronova Charles Cheung Sergey Porsev Mikhail Kozlov Ilya Tupitsyn Andrey Bondarev","title":"pCI Development Team"},{"location":"changelog/","text":"Changelog v0.0.1 v0.0.0 March 17, 2021 Initial upload of conf, conf_pt, and dtm codes to github.","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#v001","text":"","title":"v0.0.1"},{"location":"changelog/#v000","text":"March 17, 2021 Initial upload of conf, conf_pt, and dtm codes to github.","title":"v0.0.0"},{"location":"installation/","text":"Installation Required libraries In order to compile pCI the following software libraries and tools are required: Intel Fortran compiler. CMake build tool. (Optional) MPI library to run on high-performance computing clusters. The codes have only been tested with OpenMPI so far. Obtaining the source code Users can download the latest version of the pCI code package from https://github.com/ccheung93/pCI via git From the command line, you can clone the latest version: git clone https://github.com/ccheung93/pCI.git Building with CMake The codes are built using the 'CMakeLists.txt' file. The following are some example builds on the DARWIN computing cluster. A Debug build can be done: $ cd pCI $ mkdir build-debug $ cd build-debug $ vpkg_require cmake openmpi/4.1.0:intel-2020 $ FC=mpifort cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=$(pwd)/../20200402-debug .. : $ make $ make install An optimized build demands a little more: $ cd .. $ mkdir build-opt $ cd build-opt $ FC=mpifort cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$(pwd)/../20200317-opt -DCMAKE_Fortran_FLAGS_RELEASE=\"-g -O3 -mcmodel=large -xHost -m64\" .. : $ make $ make install","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#required-libraries","text":"In order to compile pCI the following software libraries and tools are required: Intel Fortran compiler. CMake build tool. (Optional) MPI library to run on high-performance computing clusters. The codes have only been tested with OpenMPI so far.","title":"Required libraries"},{"location":"installation/#obtaining-the-source-code","text":"Users can download the latest version of the pCI code package from https://github.com/ccheung93/pCI","title":"Obtaining the source code"},{"location":"installation/#via-git","text":"From the command line, you can clone the latest version: git clone https://github.com/ccheung93/pCI.git","title":"via git"},{"location":"installation/#building-with-cmake","text":"The codes are built using the 'CMakeLists.txt' file. The following are some example builds on the DARWIN computing cluster. A Debug build can be done: $ cd pCI $ mkdir build-debug $ cd build-debug $ vpkg_require cmake openmpi/4.1.0:intel-2020 $ FC=mpifort cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=$(pwd)/../20200402-debug .. : $ make $ make install An optimized build demands a little more: $ cd .. $ mkdir build-opt $ cd build-opt $ FC=mpifort cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$(pwd)/../20200317-opt -DCMAKE_Fortran_FLAGS_RELEASE=\"-g -O3 -mcmodel=large -xHost -m64\" .. : $ make $ make install","title":"Building with CMake"}]}